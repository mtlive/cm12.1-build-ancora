#services:
#  - docker
#before_install:
#- docker pull lineageos4microg/docker-lineage-cicd
#- git clone git://github.com/RR-msm7x30/android_device_samsung_ancora.git -b cm-12.1 device/samsung/ancora
#- docker run -e "BRANCH_NAME=cm-12.1" -e "DEVICE_LIST=ancora" -v "/home/user/lineage:/srv/src" -v "/home/user/zips:/srv/zips" -v "/home/user/logs:/srv/logs" -v "/home/user/cache:/srv/ccache" -e "INCLUDE_PROPRIETARY=false" -v "$(pwd):/srv/local_manifests"  lineageos4microg/docker-lineage-cicd

env: 
 global:
  - GCC_VERSION=7.x
  - secure: MBd3i5Z7I4jws+3WFCtlQ3OEWiXTd+OkqebwQmfF5TN3T8QZ9xeS599gGcTYZvzz5dJwox/DQLew5iHXjtEoJmjSKPd++7yF6zKQ2qM1Kzzw6hW0S0bKSTOzUJkwml2XhACB5fhIr+27llk5F23pOTrGcQYij2Vmmm73GFtvMDvOW91V/HCF8iZlbgRbnnsJilKKagBL1IRYec+u7luCrbvLRa02CwEwMJT+Vnr0x1LGHRClTOFrWmYEIkGhfCxdOpJASN1tqxjIj1YUVs+PiBaqTF8picDsELNm060qRWm14GHXL62sqkORGXvZ7MP0zEyEfmZcaH3K5dCRblgISw== 
  - secure: duBsUZepJFAKb6xRaImdlqxRjm4IRjtOWLhQPGM1hUiHaI49j9ndpri52gN60/3Sl4KNSApbpJhkFWl8rNvxSDzLf1FPlnAE68CPTbvgoIMZWgh05hG81wZZrfazKUhvPkwfO52Op7H//WsN5SOzrMqVICoizF/ET+RhW4wv7+f6KkNypISsfgvJLa3H3UIOjNifmgPc4P7iEZpCy0aRCB8IbeyNbolJX4eBdc0KxcYOVqCNIQP7XEPhhtl3ZcR0kvxUwAgDvmDN0qSGmBltBpHBS5Zl76HnPT4GxAPWRKJgVcMUqYNiIeof+Dx+8exlup4nAShMn7j/6IJLE437Xw== 

language: none
jdk:
  - openjdk7

build:
  runtime:
    container: false
  cache: true
  cache_dir_list: 
    - ~/.ccache
  ci:
# Install dependencies
    - sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
    - sudo apt-get  -qq update 
    - sudo apt-get  -qq install -y dpkg bc bison build-essential ccache curl flex g++-multilib gcc-multilib git gnupg gperf imagemagick lib32ncurses5-dev lib32readline-dev lib32z1-dev liblz4-tool libncurses5-dev libsdl1.2-dev libssl-dev libwxgtk3.0-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools xsltproc zip zlib1g-dev openjdk-7-jdk subversion jq> /dev/null
    - sudo add-apt-repository "deb http://us.archive.ubuntu.com/ubuntu/ bionic main"
    - sudo apt-get  -qq update 
    - sudo apt -qq install libfl2
#- wget http://ftp.br.debian.org/debian/pool/main/f/flex/libfl2_2.6.4-6.1_amd64.deb
#- sudo dpkg -i libfl2_2.6.4-6.1_amd64.deb
# OpenJDK 1.7 Ubuntu 16+
    - sudo apt install debian-archive-keyring 
    - sudo add-apt-repository 'deb http://httpredir.debian.org/debian experimental main' 
    - sudo add-apt-repository 'deb http://httpredir.debian.org/debian sid main' 
#    - sudo apt -qq update
    - sudo apt install openjdk-7-jdk
    - export JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64
    - export PATH=/usr/lib/jvm/java-7-openjdk-amd64/bin:$PATH
    - sudo update-alternatives --config java  <<<'1'
    - sudo update-alternatives --config javac <<<'1'
    - export USE_CCACHE=1
    - ccache -M 30G
    - chmod +x setup-others.sh
    - export clonedir=$(pwd)
    - source setup-others.sh
  on_success:
    - cd /root/android/lineage/out/target/product/ancora
    - ls -l
    - chmod +x $SHIPPABLE_BUILD_DIR/upload-release.sh
    - if [ "$IS_GIT_TAG" == "true" ]; then $SHIPPABLE_BUILD_DIR/upload-release.sh github_api_token=$GITHUB_TOKEN owner=mtlive repo=cm12.1-build-ancora tag=$GIT_TAG_NAME filename=./recovery.img ; fi
  on_failure:
    - >
      echo "Create cache archive" &&
      GZIP=-2 tar -czf /home/shippable/cache/$PROJECT_CACHE_ARCHIVE ~/.ccache &&
      echo "Upload cache archive" &&
      get_artifact_url="curl -s  --connect-timeout 60 --max-time 120 -XGET '$SHIPPABLE_API_URL/projects/$PROJECT_ID/artifactUrl?artifactName=$PROJECT_CACHE_ARCHIVE' -H authorization:'apiToken $SHIPPABLE_API_TOKEN'" &&
      artifact_url=$(eval $get_artifact_url | jq -r '.put') &&
      curl -s --connect-timeout 60 --max-time 120 -XPUT '$artifact_url' -T '$CACHE_FILE' &&
      echo "Cache archive uploaded successfully";

# Export of zipfile to deploy
#- export zipfile="${zipfile}"

deploy:
  provider: releases
  skip_cleanup: true
  api_key: ${KEY}
  file_glob: true
  file: "$OUT/*.zip"
  on:
  #  tags: true
    all_branches: true
